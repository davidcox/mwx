#!/usr/bin/env python

import logging
from mwx import generate_mw_objects
from mwx.parser import MWXParser, MWXMLParser
from mwx.test import  MockComponentRegistry


if __name__ == "__main__":

    import time
    from argparse import ArgumentParser
    import os.path

    op = ArgumentParser()

    op.add_argument('input_file', type=str)

    op.add_argument("-w", "--significant-whitespace", dest="significant_whitespace",
                      action="store_true", default=False,
                      help="Use significant whitespace (i.e. Python-style) syntax")

    op.add_argument("-x", "--xml", dest="print_xml",
                    action="store_true", default=False,
                    help="Print an XML representation of the code")

    op.add_argument("-a", "--ast", dest="print_ast",
                    action="store_true", default=False,
                    help="Print an XML representation of the code")

    op.add_argument("-m", "--mwx", dest="print_mwx",
                    action="store_true", default=False,
                    help="Print a recapitulated mwlw representation of the code")

    op.add_argument("-s", "--simulate", dest="mock_mw",
                    action="store_true", default=False,
                    help="Simulate the sequence of mw registry " + \
                          "calls that the experiment implies, " + \
                          "and print out the results")

    op.add_argument("-l", "--logging", dest="loglevel",
                    default='quiet')

    op.add_argument("-T", "--no-templates", dest="process_templates",
                    action="store_false", default=True,
                    help="Don't process templates")

    options = op.parse_args()

    # if len(args) != 1:
    #     raise Exception("mwlw_parser takes 1 argument specifying the input file" % sys.argv[0])
    #     sys.exit()

    input_filename = options.input_file
    input_file = open(input_filename, "r")
    input_string = input_file.read()
    input_file.close()

    file_extension = os.path.splitext(input_filename)[-1]

    tic = time.time()

    if file_extension == ".mw":
        parser = MWXParser(significant_whitespace=options.significant_whitespace)
    elif file_extension == ".xml":
        parser = MWXMLParser()
    else:
        raise Exception("Unknown file extension: %s" % file_extension)

    print_xml = options.print_xml
    print_ast = options.print_ast
    print_mwx = options.print_mwx
    mock_mw = options.mock_mw
    process_templates = options.process_templates
    l = options.loglevel
    loglevel = getattr(logging, l.upper(), 0)
    logging.basicConfig(level=loglevel)
    results = parser.parse_string(input_string,
                                  process_templates=process_templates)

    toc = time.time()

    if print_mwx:
        print(results.to_mwx())

    if print_ast:
        print(results.to_ast_string())

    if print_xml:
        print(results.to_xml())

    if mock_mw:
        reg = MockComponentRegistry()
        generate_mw_objects(results, reg)
        print(reg)
